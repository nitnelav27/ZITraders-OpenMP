/*	Fast Random Number Generator		Object-Oriented Version		Robert Axtell		The Brookings Institution		and	Middlebury College		Current version: September 2004	 */#include <iostream>#include <math.h>#include "RNG.h"/////////////////////////////////	Object Implementations...///////////////////////////////using namespace std;RandomNumberGenerator::RandomNumberGenerator(int Seed)			{				last = Seed;			};	//	RandomNumberGenerator::Init()	int	RandomNumberGenerator::LongInteger()		/*				This method generates INTEGER-valued random numbers in the interval [1, INT_MAX - 1]}				Source: Bratley, Fox and Schrage, 1987		*/		{			int k = last / 127773;			last = 16807 * (last - k	*	127773) - k	*	2836;			if (last < 0)				last += INT_MAX;			return last;		};	//	RandomNumberGenerator::LongInteger()	int	RandomNumberGenerator::IntegerInRange (int min, int max)		/*		This method generates INTEGER-valued random numbers in the interval [min, max]		*/		{			return min + LongInteger() % (max - min + 1);		};	//	RandomNumberGenerator::IntegerInRange()double	RandomNumberGenerator::UnitReal()				/*				This method generates REAL-valued random numbers in the interval [0, 1]				*/				{					return double(LongInteger()) / double(INT_MAX);				};	//	RandomNumberGenerator::UnitReal()	double	RandomNumberGenerator::RealInRange (double min, double max)				/*				This method generates REAL-valued random numbers in the interval [min, max]}				*/				{					return min + (max - min) * UnitReal();				};	//	RandomNumberGenerator::RealInRange()	void	RandomNumberGenerator::Test (int LowerLimit, int UpperLimit, int SizeOfTest, int WhatToTest, int ExtentOfOutput)			{				int i, theIntegerNumber;				double sum = 0.0;				double sum2 = 0.0;				double avg, variance, theRealNumber;								switch (WhatToTest)				{					case 1:	//	LongInteger()						for (i=1; i<=SizeOfTest; ++i)						{							theIntegerNumber = LongInteger();						  sum += theIntegerNumber;						  sum2 += theIntegerNumber * theIntegerNumber;						  if (ExtentOfOutput == 2)						  	cout << theIntegerNumber << endl;						};	// for i...						LowerLimit = 1;						UpperLimit = INT_MAX - 1;						break;					case 2:	//	LongIntegerInRange()						for (i=1; i<=SizeOfTest; ++i)						{							theIntegerNumber = IntegerInRange(LowerLimit, UpperLimit);						  sum += theIntegerNumber;						  sum2 += theIntegerNumber * theIntegerNumber;						  if (ExtentOfOutput == 2)						  	cout << theIntegerNumber << endl;						};	// for i...						break;					case 3:	//	UnitReal()						for (i=1; i<=SizeOfTest; ++i)						{							theRealNumber = UnitReal();						  sum += theRealNumber;						  sum2 += theRealNumber * theRealNumber;						  if (ExtentOfOutput == 2)						  	cout << theRealNumber << endl;						};	// for i...						LowerLimit = 0;						UpperLimit = 1;						break;					case 4:	//	RealInRange()						for (i=1; i<=SizeOfTest; ++i)						{							theRealNumber = RealInRange(LowerLimit, UpperLimit);						  sum += theRealNumber;						  sum2 += theRealNumber * theRealNumber;						  if (ExtentOfOutput == 2)						  	cout << theRealNumber << endl;						};	// for i...						break;				};	//	switch...				//	Next, compute statistics...}				avg = sum / SizeOfTest;				if (SizeOfTest != 1)					variance = (sum2 - sum * sum / SizeOfTest)/(SizeOfTest - 1);				//	Finally, do some output if requested}				if (ExtentOfOutput >= 1)					{						cout << endl;						cout << "Average should be: " << LowerLimit + (UpperLimit - LowerLimit) / 2.0 << "; actual: " << avg << endl;						if (SizeOfTest != 1)							cout << "Variance should be: " << pow(UpperLimit-LowerLimit, 2.0) / 12.0 << "; actual: " << variance << endl;					};	//	if...			};	//	RandomNumberGenerator::Test()